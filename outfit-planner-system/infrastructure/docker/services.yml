version: '3.7'

volumes:
  postgres_data:
    driver: local
  postgres_db_data:
    driver: local
#  mono-node-modules: null
#  certs:
#    driver: local
#    driver_opts:
#      type: "nfs"
#      o: "addr=host.docker.internal,rw,nolock,hard,nointr,nfsvers=3"
#      device: ":C/Projekty/outfit-planner/docker/volumes"

services:
  product-service:
    image: ${GROUP_ID}/product.service:${SERVICE_VERSION:-latest}
    ports:
      - "5005:5005"
      - "8184:8184"
      - "5432:5432"
#    build:
#      dockerfile: ./product-service/Dockerfile
#      context: .
#      args:
#        GROUP_ID: ${GROUP_ID}
#        SERVICE_VERSION: ${SERVICE_VERSION:-latest}
    environment:
      - "JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005 -Xms128m -Xmx256m"
      - "LOGGING_LEVEL_COM_MICROSERVICES_DEMO=info"
      - "LOGGING_LEVEL_ROOT=info"
      - "KAFKA-CONFIG_TOPIC-NAME=product"
      - "KAFKA-CONFIG_BOOTSTRAP-SERVERS=kafka-broker-1:9092"#, kafka-broker-2:9092, kafka-broker-3:9092"
      - "KAFKA-CONFIG_SCHEMA-REGISTRY-URL=http://schema-registry:8081"
      - "TWITTER-TO-KAFKA-SERVICE_ENABLE-MOCK-TWEETS=true"
      - "SPRING_DATASOURCE_URL=jdbc:postgresql://postgres_db:5432/postgres?currentSchema=product&binaryTransfer=true&reWriteBatchedInserts=true&stringtype=unspecified"
      - "SPRING_DATASOURCE_USERNAME=admin"
      - "SPRING_DATASOURCE_PASSWORD=admin"
      - "SERVICE_BINDING_ROOT=/bindings"
      - "SERVER_PORT=8184"
      - "KEYCLOAK_ISSUER_URI=http://keycloak-server:8082/auth/realms/outfitplanner-realm"
      - "KEYCLOAK_ADDITIONAL_ISSUERS=${PRODUCTS_ISSUERS}"
      - "KEYCLOAK_JWK_SET_URI=http://keycloak-server:8082/auth/realms/outfitplanner-realm/protocol/openid-connect/certs"
    depends_on:
      keycloak-authorization-server:
        condition: service_healthy
    networks:
      - ${GLOBAL_NETWORK:-kafka}
    healthcheck:
      test: "bash -c 'printf \"GET / HTTP/1.1\n\n\" > /dev/tcp/127.0.0.1/8080; exit $$?;'"
      interval: 20s
      timeout: 5s
      retries: 25


  outfit-service:
    image: ${GROUP_ID}/outfit.service:${SERVICE_VERSION:-latest}
    ports:
      - "8185:8185"
      - "5435:5432"
      - "5006:5005"
    #    build:
#      dockerfile: ./outfit-service/Dockerfile
#      context: .
#      args:
#        GROUP_ID: ${GROUP_ID}
#        SERVICE_VERSION: ${SERVICE_VERSION:-latest}
    environment:
      - "JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005 -Xms128m -Xmx256m"
      - "LOGGING_LEVEL_COM_MICROSERVICES_DEMO=info"
      - "LOGGING_LEVEL_ROOT=info"
      - "KAFKA-CONFIG_TOPIC-NAME=product"
      - "KAFKA-CONFIG_BOOTSTRAP-SERVERS=kafka-broker-1:9092"#, kafka-broker-2:9092, kafka-broker-3:9092"
      - "KAFKA-CONFIG_SCHEMA-REGISTRY-URL=http://schema-registry:8081"
      - "MONGO_HOST=mongodb-outfit-service"
      - "MONGO_PORT=27017"
      - "SPRING_DATASOURCE_PASSWORD=admin"
      - "SERVER_PORT=8185"
      - "KEYCLOAK_ISSUER_URI=http://keycloak-server:8082/auth/realms/outfitplanner-realm"
      - "KEYCLOAK_ADDITIONAL_ISSUERS=${OUTFITS_ISSUERS}"
      - "KEYCLOAK_JWK_SET_URI=http://keycloak-server:8082/auth/realms/outfitplanner-realm/protocol/openid-connect/certs"
    depends_on:
      keycloak-authorization-server:
        condition: service_healthy
    networks:
      - ${GLOBAL_NETWORK:-kafka}

  mongodb-outfit-service:
    image: mongo:5.0
    hostname: mongodb-outfit-service
#    restart: always
    ports:
      - "27021:27017"
    volumes:
      - "${VOLUME_PATH}/outfit-service:/data/db"
    networks:
      - ${GLOBAL_NETWORK:-kafka}

  postgres:
    image: postgres
    hostname: postgres
    ports:
      - "5439:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - "POSTGRES_DB=keycloak"
      - "POSTGRES_USER=keycloak"
      - "POSTGRES_PASSWORD=keycloak"
    networks:
      - ${GLOBAL_NETWORK:-kafka}

  postgres_db:
    image: postgres
    hostname: postgres_db
    ports:
      - "5434:5432"
    volumes:
      - postgres_db_data:/var/lib/postgresql/data
    environment:
      - "POSTGRES_DB=postgres"
      - "POSTGRES_USER=admin"
      - "POSTGRES_PASSWORD=admin"
      - "JDBC_DRIVER_CLASS=org.postgresql.Driver"
    networks:
      - ${GLOBAL_NETWORK:-kafka}

  keycloak-authorization-server:
    image: quay.io/keycloak/keycloak:${KEYCLOAK_VERSION:-latest}
    hostname: keycloak-server
    ports:
      - "8443:8443"
      - "8082:8082"
    environment:
      - "KEYCLOAK_USER=admin"
      - "KEYCLOAK_PASSWORD=admin"
      - "KEYCLOAK_LOGLEVEL=DEBUG"
      - "PROXY_ADDRESS_FORWARDING=true"
#      - "KEYCLOAK_FRONTEND_URL=http://localhost/auth"
#      - "KEYCLOAK_ADMIN=admin"
#      - "KEYCLOAK_ADMIN_PASSWORD=admin"
      - "JAVA_OPTS=-Djboss.http.port=8082"
#      - "KC_HTTPS_CERTIFICATE_FILE=/opt/keycloak/conf/keycloak-server.crt.pem"
#      - "KC_HTTPS_CERTIFICATE_KEY_FILE=/opt/keycloak/conf/keycloak-server.key.pem"
      - "DB_VENDOR=POSTGRES"
      - "DB_ADDR=postgres"
      - "DB_DATABASE=keycloak"
      - "DB_USER=keycloak"
      - "DB_SCHEMA=public"
      - "DB_PASSWORD=keycloak"
    depends_on:
      - postgres
    networks:
      - ${GLOBAL_NETWORK:-kafka}
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8082/auth/realms/master", "--fail" ]
      interval: 20s
      timeout: 5s
      retries: 10
#    volumes:
#      - /mnt/volume/certs/keycloak-server.crt.pem:/opt/keycloak/conf/keycloak-server.crt.pem
#      - /mnt/volume/certs/keycloak-server.key.pem:/opt/keycloak/conf/keycloak-server.key.pem
#    entrypoint: /opt/keycloak/bin/kc.sh -v start-dev

  prediction-service:
    hostname: prediction-service
    build:
      context: ../../prediction-service
      dockerfile: Dockerfile
    ports:
      - "2006:2006"
    networks:
      - ${GLOBAL_NETWORK:-kafka}

