<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>outfit-planner-system</artifactId>
        <groupId>com.outfit.planner.system</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>outfit-service</artifactId>

    <properties>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <packaging>war</packaging>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-tomcat</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>jakarta.servlet</groupId>
            <artifactId>jakarta.servlet-api</artifactId>
            <version>6.0.0</version>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-webflux</artifactId>
        </dependency>
        <dependency>
            <groupId>com.outfit.planner.system</groupId>
            <artifactId>kafka-model</artifactId>
        </dependency>
        <dependency>
            <groupId>com.outfit.planner.system</groupId>
            <artifactId>kafka-consumer</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-mongodb</artifactId>
        </dependency>
        <dependency>
            <groupId>com.outfit.planner.system</groupId>
            <artifactId>outbox</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-oauth2-resource-server</artifactId>
        </dependency>


        <!--        <dependency>-->
<!--            <groupId>com.food.ordering.system</groupId>-->
<!--            <artifactId>kafka-consumer</artifactId>-->
<!--        </dependency>-->
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>${version.maven.war.plugin}</version>
                <configuration>
                    <failOnMissingWebXml>false</failOnMissingWebXml>
                    <webResources>
                        <resource>
                            <directory>src/main/webapp</directory>
                            <targetPath>WEB-INF/classes</targetPath>
                            <includes>
                                <include>**/*.xml</include>
                                <!-- Add other resources if needed -->
                            </includes>
                        </resource>
                    </webResources>
                </configuration>
            </plugin>
        </plugins>
    </build>

<!--    <build>-->
<!--        <plugins>-->
<!--            <plugin>-->
<!--                <groupId>org.springframework.boot</groupId>-->
<!--                <artifactId>spring-boot-maven-plugin</artifactId>-->
<!--                <configuration>-->
<!--                    <image>-->
<!--                        <name>${project.groupId}/outfit.service:${project.version}</name>-->
<!--                    </image>-->

<!--                    <docker>-->
<!--                        <host>${docker.sock.path.default}</host>-->
<!--                        <tlsVerify>false</tlsVerify>-->
<!--                    </docker>-->
<!--                </configuration>-->
<!--                <executions>-->
<!--                    <execution>-->
<!--                        <phase>install</phase>-->
<!--                        <goals>-->
<!--                            <goal>build-image</goal>-->
<!--                        </goals>-->
<!--                        <configuration>-->
<!--                            <image>-->
<!--                                <builder>paketobuildpacks/builder:base</builder>-->
<!--&lt;!&ndash;                                <env>&ndash;&gt;-->
<!--&lt;!&ndash;                                    <BP_CA_CERTIFICATES>/mnt/volume/certs</BP_CA_CERTIFICATES>&ndash;&gt;-->
<!--&lt;!&ndash;                                </env>&ndash;&gt;-->
<!--                                <env>-->
<!--                                    <BP_DEBUG>=true</BP_DEBUG>-->
<!--                                </env>-->
<!--                                <bindings>-->
<!--                                    <binding>${env.CERTS_PATH}/pems:/platform/bindings/ca-certificates</binding>-->
<!--                                </bindings>-->
<!--                            </image>-->
<!--                        </configuration>-->
<!--                    </execution>-->
<!--                </executions>-->
<!--            </plugin>-->
<!--        </plugins>-->
<!--    </build>-->

</project>