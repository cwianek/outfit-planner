server:
  port: 8185
  servlet:
    context-path: /api

logging:
  level:
    com.outfit.planner.system: DEBUG
    org.apache.tomcat: DEBUG
    org.springframework.security: DEBUG

outfit-service:
  product-topic-name: product
  outbox-scheduler-fixed-rate: 10000
  outbox-scheduler-initial-delay: 10000
  issuers: ${KEYCLOAK_ADDITIONAL_ISSUERS}
  #issuers: https://outfits-dev/auth/realms/outfitplanner-realm,https://dashboard-dev/auth/realms/outfitplanner-realm

prediction-service-config:
  hostname: http://prediction-service
  port: 2006

spring:
  data:
    mongodb:
      host: ${MONGO_HOST:localhost}
      port: ${MONGO_PORT:27017}
      database: outfit-service
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${KEYCLOAK_ISSUER_URI:http://localhost:8082/auth/realms/outfitplanner-realm}
          jwk-set-uri: ${KEYCLOAK_JWK_SET_URI:http://localhost:8082/auth/realms/outfitplanner-realm/protocol/openid-connect/certs}

#      client:
#        registration:
#          keycloak:
#            client-id: 'outfit-service'
#            client-secret: '850a19e8-1828-43b5-beff-0eea5e3726e2'
#            authorization-grant-type: authorization_code
#            redirect-uri: http://localhost:8185/outfit-service/login/ouath2/code/keycloak
#            scope: openid
#        provider:
#          keycloak:
#            issuer-uri: http://localhost:8082/auth/realms/outfitplanner-realm


security:
  logout-success-uri: http:/localhost:8185/outfit-service
#spring:
#  jpa:
#    open-in-view: false
#    show-sql: true
#    database-platform: org.hibernate.dialect.PostgreSQL9Dialect
#    properties:
#      hibernate:
#        dialect: org.hibernate.dialect.PostgreSQL9Dialect
#  datasource:
#    url: jdbc:postgresql://localhost:5432/postgres?currentSchema=order&binaryTransfer=true&reWriteBatchedInserts=true&stringtype=unspecified
#    username: postgres
#    password: admin
#    driver-class-name: org.postgresql.Driver
#    platform: postgres
#  sql:
#    init:
#      mode: ALWAYS
#      schema-locations: classpath:init-schema.sql

kafka-config:
  bootstrap-servers: ${KAFKA-CONFIG_BOOTSTRAP-SERVERS:localhost:19092, localhost:29092, localhost:39092}
  schema-registry-url-key: schema.registry.url
  schema-registry-url: ${KAFKA-CONFIG_SCHEMA-REGISTRY-URL:http://localhost:8081}
  #num-of-partitions: 3
  num-of-partitions: 1
  #replication-factor: 3
  replication-factor: 1

#kafka-producer-config:
#  key-serializer-class: org.apache.kafka.common.serialization.StringSerializer
#  value-serializer-class: io.confluent.kafka.serializers.KafkaAvroSerializer
#  compression-type: snappy
#  acks: all
#  batch-size: 16384
#  batch-size-boost-factor: 100
#  linger-ms: 5
#  request-timeout-ms: 60000
#  retry-count: 5

kafka-consumer-config:
  key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
  value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
  product-group-id: product-topic-consumer
  auto-offset-reset: earliest
  specific-avro-reader-key: specific.avro.reader
  specific-avro-reader: true
  batch-listener: true
  auto-startup: true
  #concurrency-level: 3
  concurrency-level: 1
  session-timeout-ms: 10000
  heartbeat-interval-ms: 3000
  max-poll-interval-ms: 300000
  max-poll-records: 500
  max-partition-fetch-bytes-default: 1048576
  max-partition-fetch-bytes-boost-factor: 1
  poll-timeout-ms: 150


